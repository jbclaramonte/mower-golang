// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package apigen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Garden defines model for Garden.
type Garden struct {
	Height int `json:"height"`
	Width  int `json:"width"`
}

// CreateGardenJSONBody defines parameters for CreateGarden.
type CreateGardenJSONBody = Garden

// CreateGardenJSONRequestBody defines body for CreateGarden for application/json ContentType.
type CreateGardenJSONRequestBody = CreateGardenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /garden)
	CreateGarden(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateGarden converts echo context to params.
func (w *ServerInterfaceWrapper) CreateGarden(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateGarden(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/garden", wrapper.CreateGarden)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xUTW/bMAz9KwK3o2el6c2ndUUxFBjWAt2t6EGTaVuF9TGSrlsU+e+DZKdJ1h53iiKR",
	"j4+Pj34FG32KAYMwNK/AdkBvyvGKKFI+JIoJSRyWaxtbzL9dJG8EGnBBzrdQgbwkXP5ijwS7Cjwym75E",
	"r48s5EIPu10FhH8mR9hCc79gHuIf3sDi70e0krG+G2oxvKczoOsHOSpxVH92rQwfPf1Tfomr9ljvy+cE",
	"F7q49B/E2FIRvXEjNGCSEzT+K8+m75FqF6GCYHyGuFvu1MXttfqFxkMFE+WkQSQ1Wh/l7CpokS25JC4G",
	"aOBCsfFpxJIsgxE1MbIyKqGwREJlWJmg8HkJk6ha9DGwkBFUHRqZCFm5oGRAdZMwZKTzeqM4oXWds6aU",
	"qmB0FgOXUa3EL5KxA6ptvTmhzI3W8zzXpjzXkXq95rL+cX159fPu6su23tSD+DF3JEieb7o7pCdn8aO+",
	"dQnR2UFOxmPNbtc2oYInJF5EOas39SYjx4TBJAcNnNdnhWUyMhRT6P7glshlVqfKXhIaKVIukSoGNTs7",
	"FJ18nJGUY9VHF/qsqo9PmUT2XRHsun3DWH25GApZvsX2ZW8TDKW0SWlcldaPHMNhz/LpM2EHDXzSh0XU",
	"6xbqFbz477SB5SVzs4UGHDtaaMJicU4xDyaX2W4272XgyVpkXpzXmWmU/0Z9+Xp8wHwK+JzQCrYK9zE5",
	"ipHykKG5fz3dkL3Z6yPL5LnvHnZ/AwAA//9AH1x0vgQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
